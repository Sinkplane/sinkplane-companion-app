// https://docs.expo.dev/guides/using-eslint/
const js = require("@eslint/js");
const tseslint = require("typescript-eslint");
const reactPlugin = require("eslint-plugin-react");
const reactHooksPlugin = require("eslint-plugin-react-hooks");

const jsOnly = {
  "arrow-body-style": "error",
  "arrow-parens": ["off", "as-needed"],
  camelcase: "error",
  "comma-dangle": "off",
  complexity: ["error", 12],
  "constructor-super": "error",
  curly: ["error", "multi-line"],
  "dot-notation": "error",
  "eol-last": "error",
  eqeqeq: ["error", "smart"],
  "guard-for-in": "error",
  "id-blacklist": ["error", "any", "Undefined"],
  "id-match": "error",
  "implicit-arrow-linebreak": "off",
  "linebreak-style": ["error", "unix"],
  "max-classes-per-file": ["error", 1],
  "new-parens": "error",
  "newline-per-chained-call": "error",
  "no-bitwise": "error",
  "no-caller": "error",
  "no-empty-function": "off",
  "no-cond-assign": "error",
  "no-console": [
    "error",
    {
      allow: [
        "dir",
        "time",
        "timeEnd",
        "timeLog",
        "trace",
        "assert",
        "clear",
        "count",
        "countReset",
        "group",
        "groupEnd",
        "table",
        "debug",
        "info",
        "dirxml",
        "error",
        "groupCollapsed",
        "Console",
        "profile",
        "profileEnd",
        "timeStamp",
        "context",
      ],
    },
  ],
  "no-constant-condition": "error",
  "no-control-regex": "error",
  "no-debugger": "error",
  "no-duplicate-imports": "error",
  "no-empty": "error",
  "no-eval": "error",
  "no-extra-semi": "off",
  "no-fallthrough": "error",
  "no-invalid-regexp": "error",
  "no-invalid-this": "off",
  "no-irregular-whitespace": "error",
  "no-multiple-empty-lines": "off",
  "no-new-wrappers": "error",
  "no-redeclare": "error",
  "no-regex-spaces": "error",
  "no-return-await": "error",
  "no-shadow": [
    "error",
    {
      hoist: "all",
    },
  ],
  "no-throw-literal": "error",
  "no-trailing-spaces": "error",
  "no-undef-init": "error",
  "no-underscore-dangle": "warn",
  "no-unsafe-finally": "error",
  "no-unused-expressions": [
    "error",
    {
      allowTaggedTemplates: true,
      allowShortCircuit: true,
    },
  ],
  "no-unused-labels": "error",
  "no-var": "error",
  "object-shorthand": "error",
  "one-var": ["error", "never"],
  "prefer-const": [
    "error",
    {
      destructuring: "any",
      ignoreReadBeforeAssign: false,
    },
  ],
  "quote-props": "off",
  radix: "error",
  "space-before-function-paren": ["error", "always"],
  "space-in-parens": ["off", "never"],
  "spaced-comment": "error",
  "use-isnan": "error",
  "valid-typeof": "error",
  "consistent-return": "off",
  "array-callback-return": "off",
  "no-return-assign": "off",
  "default-case": "off",
  "no-void": "off",
  "object-curly-newline": "off",
  "operator-linebreak": "off",
  "function-paren-newline": "off",
  "max-len": ["error", { code: 140 }],
  indent: "off",
};

const tsOnly = {
  ...jsOnly,
  "max-len": ["error", { code: 140, tabWidth: 2 }],
  "react/function-component-definition": [
    2,
    { namedComponents: ["function-declaration", "arrow-function"] },
  ],
  "react/jsx-filename-extension": [1, { extensions: [".tsx", ".jsx"] }],
  "react/jsx-one-expression-per-line": "off",
  "react/no-array-index-key": "off",
  "space-before-function-paren": [
    "error",
    {
      anonymous: "always",
      named: "never",
      asyncArrow: "always",
    },
  ],
  "no-nested-ternary": "off",
  "no-undef": "off",
  "react/require-default-props": "off",
  "react/jsx-indent": "off",
  "react/jsx-props-no-spreading": "off",
  "react/jsx-wrap-multilines": "off",
  "react/jsx-no-useless-fragment": "off",
  "jest/expect-expect": "off",
  "react-hooks/exhaustive-deps": "off",
  "@typescript-eslint/no-non-null-assertion": "off",
};

module.exports = [
  {
    ignores: ["dist/*", "node_modules/*", ".expo/*", "ios/*", "android/*"],
  },
  js.configs.recommended,
  ...tseslint.configs.recommended,
  {
    files: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"],
    plugins: {
      react: reactPlugin,
      "react-hooks": reactHooksPlugin,
    },
    languageOptions: {
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        __DEV__: "readonly",
        ErrorUtils: false,
        FormData: false,
        XMLHttpRequest: false,
        alert: false,
        cancelAnimationFrame: false,
        cancelIdleCallback: false,
        clearImmediate: false,
        fetch: false,
        navigator: false,
        process: false,
        requestAnimationFrame: false,
        requestIdleCallback: false,
        setImmediate: false,
        window: false,
        console: false,
        require: false,
        module: false,
        exports: false,
      },
    },
    settings: {
      react: {
        version: "detect",
      },
    },
  },
  {
    files: ["**/*.js", "**/*.jsx"],
    rules: {
      ...jsOnly,
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "warn",
      "@typescript-eslint/no-require-imports": "off",
    },
  },
  {
    files: ["**/*.ts", "**/*.tsx"],
    rules: {
      ...tsOnly,
      "react-hooks/rules-of-hooks": "error",
      "@typescript-eslint/no-unused-vars": [
        "warn",
        { argsIgnorePattern: "^_" },
      ],
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/no-non-null-assertion": "off",
    },
  },
];
